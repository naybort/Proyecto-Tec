//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SistemaHorasConsulta.wsEmail {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailSoap", Namespace="http://tempuri.org/")]
    public partial class Email : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback EnviarOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnviarSinAutOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnviarConAdjuntosOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnviarConAdjuntosVariosOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Email() {
            this.Url = global::SistemaHorasConsulta.Properties.Settings.Default.SistemaHorasConsulta_wsEviar_Email;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event EnviarCompletedEventHandler EnviarCompleted;
        
        /// <remarks/>
        public event EnviarSinAutCompletedEventHandler EnviarSinAutCompleted;
        
        /// <remarks/>
        public event EnviarConAdjuntosCompletedEventHandler EnviarConAdjuntosCompleted;
        
        /// <remarks/>
        public event EnviarConAdjuntosVariosCompletedEventHandler EnviarConAdjuntosVariosCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Enviar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Enviar(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password) {
            this.Invoke("Enviar", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password});
        }
        
        /// <remarks/>
        public void EnviarAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password) {
            this.EnviarAsync(para, cc, asunto, cuerpo, html, prioridad, usuario, password, null);
        }
        
        /// <remarks/>
        public void EnviarAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, object userState) {
            if ((this.EnviarOperationCompleted == null)) {
                this.EnviarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnviarOperationCompleted);
            }
            this.InvokeAsync("Enviar", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password}, this.EnviarOperationCompleted, userState);
        }
        
        private void OnEnviarOperationCompleted(object arg) {
            if ((this.EnviarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnviarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnviarSinAut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnviarSinAut(string de, string para, string cc, string asunto, string cuerpo, bool html, string prioridad) {
            this.Invoke("EnviarSinAut", new object[] {
                        de,
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad});
        }
        
        /// <remarks/>
        public void EnviarSinAutAsync(string de, string para, string cc, string asunto, string cuerpo, bool html, string prioridad) {
            this.EnviarSinAutAsync(de, para, cc, asunto, cuerpo, html, prioridad, null);
        }
        
        /// <remarks/>
        public void EnviarSinAutAsync(string de, string para, string cc, string asunto, string cuerpo, bool html, string prioridad, object userState) {
            if ((this.EnviarSinAutOperationCompleted == null)) {
                this.EnviarSinAutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnviarSinAutOperationCompleted);
            }
            this.InvokeAsync("EnviarSinAut", new object[] {
                        de,
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad}, this.EnviarSinAutOperationCompleted, userState);
        }
        
        private void OnEnviarSinAutOperationCompleted(object arg) {
            if ((this.EnviarSinAutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnviarSinAutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnviarConAdjuntos", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnviarConAdjuntos(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto) {
            this.Invoke("EnviarConAdjuntos", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password,
                        direccionAdjunto});
        }
        
        /// <remarks/>
        public void EnviarConAdjuntosAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto) {
            this.EnviarConAdjuntosAsync(para, cc, asunto, cuerpo, html, prioridad, usuario, password, direccionAdjunto, null);
        }
        
        /// <remarks/>
        public void EnviarConAdjuntosAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto, object userState) {
            if ((this.EnviarConAdjuntosOperationCompleted == null)) {
                this.EnviarConAdjuntosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnviarConAdjuntosOperationCompleted);
            }
            this.InvokeAsync("EnviarConAdjuntos", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password,
                        direccionAdjunto}, this.EnviarConAdjuntosOperationCompleted, userState);
        }
        
        private void OnEnviarConAdjuntosOperationCompleted(object arg) {
            if ((this.EnviarConAdjuntosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnviarConAdjuntosCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnviarConAdjuntosVarios", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnviarConAdjuntosVarios(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto, string Adjunto1, string Adjunto2, string Adjunto3, string Adjunto4, string Adjunto5) {
            this.Invoke("EnviarConAdjuntosVarios", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password,
                        direccionAdjunto,
                        Adjunto1,
                        Adjunto2,
                        Adjunto3,
                        Adjunto4,
                        Adjunto5});
        }
        
        /// <remarks/>
        public void EnviarConAdjuntosVariosAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto, string Adjunto1, string Adjunto2, string Adjunto3, string Adjunto4, string Adjunto5) {
            this.EnviarConAdjuntosVariosAsync(para, cc, asunto, cuerpo, html, prioridad, usuario, password, direccionAdjunto, Adjunto1, Adjunto2, Adjunto3, Adjunto4, Adjunto5, null);
        }
        
        /// <remarks/>
        public void EnviarConAdjuntosVariosAsync(string para, string cc, string asunto, string cuerpo, bool html, string prioridad, string usuario, string password, string direccionAdjunto, string Adjunto1, string Adjunto2, string Adjunto3, string Adjunto4, string Adjunto5, object userState) {
            if ((this.EnviarConAdjuntosVariosOperationCompleted == null)) {
                this.EnviarConAdjuntosVariosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnviarConAdjuntosVariosOperationCompleted);
            }
            this.InvokeAsync("EnviarConAdjuntosVarios", new object[] {
                        para,
                        cc,
                        asunto,
                        cuerpo,
                        html,
                        prioridad,
                        usuario,
                        password,
                        direccionAdjunto,
                        Adjunto1,
                        Adjunto2,
                        Adjunto3,
                        Adjunto4,
                        Adjunto5}, this.EnviarConAdjuntosVariosOperationCompleted, userState);
        }
        
        private void OnEnviarConAdjuntosVariosOperationCompleted(object arg) {
            if ((this.EnviarConAdjuntosVariosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnviarConAdjuntosVariosCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EnviarCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EnviarSinAutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EnviarConAdjuntosCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EnviarConAdjuntosVariosCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591